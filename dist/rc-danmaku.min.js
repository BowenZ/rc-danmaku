!(function (t, e) {
  'object' == typeof exports && 'object' == typeof module
    ? (module.exports = e(require('react'), require('react-dom')))
    : 'function' == typeof define && define.amd
    ? define(['react', 'react-dom'], e)
    : 'object' == typeof exports
    ? (exports['rc-danmaku'] = e(require('react'), require('react-dom')))
    : (t['rc-danmaku'] = e(t.React, t.ReactDOM));
})(window, function (t, e) {
  return (function (t) {
    var e = {};
    function i(n) {
      if (e[n]) return e[n].exports;
      var r = (e[n] = { i: n, l: !1, exports: {} });
      return t[n].call(r.exports, r, r.exports, i), (r.l = !0), r.exports;
    }
    return (
      (i.m = t),
      (i.c = e),
      (i.d = function (t, e, n) {
        i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });
      }),
      (i.r = function (t) {
        'undefined' != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }),
          Object.defineProperty(t, '__esModule', { value: !0 });
      }),
      (i.t = function (t, e) {
        if ((1 & e && (t = i(t)), 8 & e)) return t;
        if (4 & e && 'object' == typeof t && t && t.__esModule) return t;
        var n = Object.create(null);
        if (
          (i.r(n),
          Object.defineProperty(n, 'default', { enumerable: !0, value: t }),
          2 & e && 'string' != typeof t)
        )
          for (var r in t)
            i.d(
              n,
              r,
              function (e) {
                return t[e];
              }.bind(null, r)
            );
        return n;
      }),
      (i.n = function (t) {
        var e =
          t && t.__esModule
            ? function () {
                return t.default;
              }
            : function () {
                return t;
              };
        return i.d(e, 'a', e), e;
      }),
      (i.o = function (t, e) {
        return Object.prototype.hasOwnProperty.call(t, e);
      }),
      (i.p = ''),
      i((i.s = 2))
    );
  })([
    function (e, i) {
      e.exports = t;
    },
    function (t, i) {
      t.exports = e;
    },
    function (t, e, i) {
      'use strict';
      function n(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var i = 0, n = new Array(e); i < e; i++) n[i] = t[i];
        return n;
      }
      function r(t) {
        return (
          (function (t) {
            if (Array.isArray(t)) return n(t);
          })(t) ||
          (function (t) {
            if ('undefined' != typeof Symbol && Symbol.iterator in Object(t))
              return Array.from(t);
          })(t) ||
          (function (t, e) {
            if (t) {
              if ('string' == typeof t) return n(t, e);
              var i = Object.prototype.toString.call(t).slice(8, -1);
              return (
                'Object' === i && t.constructor && (i = t.constructor.name),
                'Map' === i || 'Set' === i
                  ? Array.from(t)
                  : 'Arguments' === i ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)
                  ? n(t, e)
                  : void 0
              );
            }
          })(t) ||
          (function () {
            throw new TypeError(
              'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function s(t, e) {
        if (!(t instanceof e))
          throw new TypeError('Cannot call a class as a function');
      }
      function o(t, e) {
        for (var i = 0; i < e.length; i++) {
          var n = e[i];
          (n.enumerable = n.enumerable || !1),
            (n.configurable = !0),
            'value' in n && (n.writable = !0),
            Object.defineProperty(t, n.key, n);
        }
      }
      function a(t, e, i) {
        return e && o(t.prototype, e), i && o(t, i), t;
      }
      function u(t, e, i) {
        return (
          e in t
            ? Object.defineProperty(t, e, {
                value: i,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (t[e] = i),
          t
        );
      }
      i.r(e),
        i.d(e, 'default', function () {
          return y;
        });
      var l,
        c = i(0),
        h = i.n(c),
        f = i(1),
        d = i.n(f);
      !(function (t) {
        (t.PENDING = 'pending'),
          (t.RUNNING = 'running'),
          (t.PAUSED = 'paused'),
          (t.FINISHED = 'finished');
      })(l || (l = {}));
      var p = (function () {
          function t(e, i) {
            var n = this;
            s(this, t),
              u(this, 'status', l.PENDING),
              u(this, 'element', void 0),
              u(this, 'speed', void 0),
              u(this, 'targetContainer', void 0),
              u(this, 'trackIndex', void 0),
              u(this, 'rowHeight', void 0),
              u(this, 'isTotalOut', !1),
              u(this, 'rightDistance', 0),
              u(this, 'totalOutTimer', 0),
              (this.speed = i.speed),
              (this.targetContainer = i.targetContainer),
              (this.trackIndex = i.trackIndex),
              (this.rowHeight = i.rowHeight);
            var r = document.createElement('div');
            (r.className = 'bullet-item'),
              r.setAttribute(
                'style',
                'position: absolute;\n       line-height: 1.125;\n       user-select: none;\n       white-space: pre;\n       perspective: 500px;\n       will-change: transform;\n       pointer-events: none;'
              ),
              (r.style.opacity = String(i.opacity));
            var o =
              'string' == typeof e
                ? h.a.createElement(
                    'span',
                    {
                      className: 'bullet-item-text',
                      style: {
                        textShadow:
                          '#000 1px 0px 1px, #000 0px 1px 1px, #000 0px -1px 1px,#000 -1px 0px 1px',
                        color: i.color || '#fff',
                        fontSize: '25px',
                      },
                    },
                    e
                  )
                : e;
            d.a.render(o, r),
              (this.element = r),
              i.targetContainer.appendChild(this.element);
            var a = this.targetContainer.getBoundingClientRect().width;
            (r.style.left = ''.concat(a, 'px')),
              (r.style.top = ''.concat(this.trackIndex * this.rowHeight, 'px')),
              this.element.addEventListener('transitionend', function () {
                console.log('====transition end===='),
                  n.destroy(),
                  (n.status = l.FINISHED),
                  (n.isTotalOut = !1),
                  i.onDestroy(i.trackIndex);
              });
          }
          return (
            a(t, [
              {
                key: 'startTotalOutTimer',
                value: function () {
                  var t = this;
                  if (!this.totalOutTimer) {
                    var e = this.targetContainer.getBoundingClientRect(),
                      i = e.left,
                      n = e.width,
                      r = this.element.getBoundingClientRect().left,
                      s = this.element.offsetWidth - (i + n - r);
                    if (!(s <= 0)) {
                      var o = s / this.speed;
                      this.totalOutTimer = setTimeout(function () {
                        console.log('====set is total out===='),
                          (t.isTotalOut = !0),
                          (t.totalOutTimer = 0);
                      }, 1e3 * o + 500);
                    }
                  }
                },
              },
              {
                key: 'clearTotalOutTimer',
                value: function () {
                  this.totalOutTimer &&
                    (clearTimeout(this.totalOutTimer),
                    (this.totalOutTimer = 0));
                },
              },
              {
                key: 'run',
                value: function () {
                  var t = this.targetContainer.getBoundingClientRect().width;
                  (this.element.style.transition = 'transform '.concat(
                    (
                      (t + this.element.scrollWidth - this.rightDistance) /
                      this.speed
                    ).toFixed(2),
                    's linear'
                  )),
                    (this.element.style.transform = 'translate3d(-'.concat(
                      t + this.element.scrollWidth,
                      'px, 0, 0)'
                    )),
                    (this.status = l.RUNNING),
                    this.startTotalOutTimer();
                },
              },
              {
                key: 'pause',
                value: function () {
                  var t = this.targetContainer.getBoundingClientRect(),
                    e = t.left,
                    i = t.width,
                    n = this.element.getBoundingClientRect().left;
                  (this.rightDistance = i - (n - e)),
                    (this.element.style.transform = 'translate3d(-'.concat(
                      this.rightDistance,
                      'px, 0, 0)'
                    )),
                    (this.element.style.transition = 'transform 0s linear 0s'),
                    (this.status = l.PAUSED),
                    this.clearTotalOutTimer();
                },
              },
              {
                key: 'destroy',
                value: function () {
                  this.totalOutTimer && clearTimeout(this.totalOutTimer),
                    this.element.remove();
                },
              },
              {
                key: 'isRunning',
                get: function () {
                  return this.status === l.RUNNING;
                },
              },
              {
                key: 'isFinished',
                get: function () {
                  return this.status === l.FINISHED;
                },
              },
            ]),
            t
          );
        })(),
        m = (function () {
          function t(e) {
            var i,
              n,
              r,
              o = this,
              a =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : {};
            if (
              (s(this, t),
              u(this, 'container', null),
              u(this, 'width', 0),
              u(this, 'height', 0),
              u(this, 'rowHeight', 40),
              u(this, 'trackCount', 0),
              u(this, 'speed', 100),
              u(this, 'opacity', 1),
              u(this, 'allPaused', !1),
              u(this, 'isDestroyed', !1),
              u(this, 'trackList', []),
              u(this, 'queue', []),
              u(this, 'queueTimer', 0),
              u(this, 'visibilityChangeEventHandle', function () {
                console.log(
                  '====visibility change====',
                  document.visibilityState
                ),
                  'hidden' === document.visibilityState
                    ? o.pause()
                    : o.resume();
              }),
              'string' == typeof e)
            ) {
              if (
                ((this.container = document.querySelector(e)), !this.container)
              )
                throw new Error('container not found');
            } else this.container = e;
            (this.rowHeight =
              null !== (i = a.rowHeight) && void 0 !== i
                ? i
                : t.DEFAULT_ROW_HEIGHT),
              (this.speed =
                null !== (n = a.speed) && void 0 !== n ? n : t.DEFAULT_SPEED),
              (this.opacity =
                null !== (r = a.opacity) && void 0 !== r
                  ? r
                  : t.DEFAULT_OPACITY),
              this.container.classList.add(t.containerClassName),
              (this.container.style.position = 'relative'),
              (this.container.style.overflow = 'hidden');
            var l = this.container.getBoundingClientRect(),
              c = l.width,
              h = l.height;
            (this.width = c),
              (this.height = h),
              (this.trackCount = Math.floor(h / this.rowHeight)),
              (this.trackList = Array(this.trackCount)
                .fill(null)
                .map(function () {
                  return [];
                })),
              console.log('====this.trackList====', this.trackList.length),
              document.addEventListener(
                'visibilitychange',
                this.visibilityChangeEventHandle
              );
          }
          return (
            a(t, [
              {
                key: 'getTrackIndex',
                value: function () {
                  if (!this.trackList.length) return 0;
                  var t = 0,
                    e = this.trackList[0].length;
                  return (
                    this.trackList.forEach(function (i, n) {
                      var r = i.filter(function (t) {
                        return !t.isTotalOut;
                      }).length;
                      r < e && ((e = r), (t = n));
                    }),
                    t
                  );
                },
              },
              {
                key: 'emit',
                value: function (t) {
                  var e = this,
                    i =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : {};
                  if (this.container && !this.isDestroyed) {
                    var n = this.getTrackIndex(),
                      r = new p(t, {
                        color: i.color,
                        speed: this.speed,
                        opacity: this.opacity,
                        targetContainer: this.container,
                        trackIndex: n,
                        rowHeight: this.rowHeight,
                        onDestroy: function (t) {
                          e.trackList[t] = e.trackList[t].filter(function (t) {
                            return !t.isFinished;
                          });
                        },
                      });
                    this.trackList[n].push(r), this.allPaused || r.run();
                  }
                },
              },
              {
                key: 'hasFreeTrack',
                value: function () {
                  return this.trackList.some(function (t) {
                    return !t || !t.length || t[t.length - 1].isTotalOut;
                  });
                },
              },
              {
                key: 'push',
                value: function (t) {
                  var e =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {};
                  this.isDestroyed ||
                    (this.hasFreeTrack()
                      ? this.emit(t, e)
                      : (this.queue.push({ node: t, options: e }),
                        this.startQueueTimer()));
                },
              },
              {
                key: 'pushAll',
                value: function (t) {
                  var e,
                    i =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : {};
                  this.isDestroyed ||
                    ((e = this.queue).push.apply(
                      e,
                      r(
                        t.map(function (t) {
                          return { node: t, options: i };
                        })
                      )
                    ),
                    this.startQueueTimer());
                },
              },
              {
                key: 'clearQueueTimer',
                value: function () {
                  this.queueTimer &&
                    (clearInterval(this.queueTimer), (this.queueTimer = 0));
                },
              },
              {
                key: 'startQueueTimer',
                value: function () {
                  var t = this;
                  this.queueTimer ||
                    this.allPaused ||
                    this.isDestroyed ||
                    (this.queueTimer = setInterval(function () {
                      if (t.queue.length > 0) {
                        if (
                          (console.log('====queue run===='), t.hasFreeTrack())
                        ) {
                          var e = t.queue.shift();
                          e && t.emit(e.node, e.options);
                        }
                      } else console.log('====queue clear===='), t.clearQueueTimer();
                    }, 200));
                },
              },
              {
                key: 'pause',
                value: function () {
                  this.allPaused ||
                    ((this.allPaused = !0),
                    this.clearQueueTimer(),
                    this.trackList.forEach(function (t) {
                      return t.forEach(function (t) {
                        t.pause();
                      });
                    }));
                },
              },
              {
                key: 'resume',
                value: function () {
                  this.allPaused &&
                    !this.isDestroyed &&
                    ((this.allPaused = !1),
                    this.startQueueTimer(),
                    this.trackList.forEach(function (t) {
                      return t.forEach(function (t) {
                        t.run();
                      });
                    }));
                },
              },
              {
                key: 'destroy',
                value: function () {
                  this.container &&
                    (this.clearQueueTimer(),
                    this.trackList.forEach(function (t) {
                      return t.forEach(function (t) {
                        t.destroy();
                      });
                    }),
                    (this.trackList = []),
                    document.removeEventListener(
                      'visibilitychange',
                      this.visibilityChangeEventHandle
                    ),
                    this.container.classList.remove(t.containerClassName),
                    (this.container = null),
                    (this.isDestroyed = !0));
                },
              },
            ]),
            t
          );
        })();
      u(m, 'DEFAULT_ROW_HEIGHT', 40),
        u(m, 'DEFAULT_SPEED', 100),
        u(m, 'DEFAULT_OPACITY', 1),
        u(m, 'containerClassName', 'danmaku-container');
      var y = m;
    },
  ]);
});
